/*
 */
package view;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Dolgozo;
import model.FileBeolvasas;

/**
 *
 * @author rohovszky.akos
 */
public class Dolgozok extends javax.swing.JFrame {
    private static boolean LOADING_GENDER_LISTS = true;

    private static final char GENDER_GIRL = 'L';
    private static final char GENDER_BOY = 'F';
    private static final char GENDER_ALL = '*';
    
    private static final String DEF_LABEL_OLDEST = "legidősebb:";
    private static final String DEF_LABEL_SUM_AGE = "összes kor:";
    private static final String DEF_LABEL_OLD_WORKER = "6 éve dolgozó:";
    
    private static final String DEF_LABEL_STATUS_AGE = "kor:";
    private static final String DEF_LABEL_STATUS_HOURS_WORKED = "mióta dolgozik:";
    
    private static final String DOLGOZOK_FILE_PATH = "dolgozok.txt";
    
    private List<Dolgozo> dolgozok;
    
    /**
     * Creates new form Dolgozok
     */
    public Dolgozok() {
        initComponents();
        this.dolgozok = FileBeolvasas.beolvas();
        uddateGenderLists();
    }
    
    private List<Dolgozo> getDolgozok(char gender)
    {
        List<Dolgozo> dolg = new ArrayList<>();
        for (Dolgozo dolgozo : dolgozok) {
            if (dolgozo.getGender() == gender)
            {
                dolg.add(dolgozo);
            }
        }
        return dolg;
    }
    
    private List<String> getDolgozoNames(char gender)
    {
        List<String> names = new ArrayList<>();
        for (Dolgozo dolgozo : dolgozok) {
            if (gender == '*' || dolgozo.getGender() == gender)
            {
                names.add(dolgozo.getName());
            }
        }
        return names;
    }
    
    private void uddateGenderLists() {
        var dolgBoys = getDolgozoNames(GENDER_BOY);
        var dolgGirls = getDolgozoNames(GENDER_GIRL);
        for (String dolgGirl : dolgGirls) {
            comboBoxGirls.addItem(dolgGirl);
        }
        for (String dolgBoy : dolgBoys) {
            comboBoxBoys.addItem(dolgBoy);
        }
        comboBoxBoys.setSelectedIndex(-1);
        comboBoxGirls.setSelectedIndex(-1);
        LOADING_GENDER_LISTS = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nemek = new javax.swing.ButtonGroup();
        buttonSave = new javax.swing.JButton();
        checkBoxAllGnders = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        radioButtonGirl = new javax.swing.JRadioButton();
        radioButtonBoy = new javax.swing.JRadioButton();
        labelOldest = new javax.swing.JLabel();
        labelSumAge = new javax.swing.JLabel();
        labelOldWorker = new javax.swing.JLabel();
        labelStatusAge = new javax.swing.JLabel();
        labelStatusWorkHours = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        comboBoxGirls = new javax.swing.JComboBox<>();
        comboBoxBoys = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dolgozók");

        buttonSave.setText("Ment");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        checkBoxAllGnders.setText("Mindkettő nem");
        checkBoxAllGnders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAllGndersActionPerformed(evt);
            }
        });

        jLabel1.setText("Lányok");

        jLabel2.setText("Adatok");

        jLabel3.setText("Összesítő");

        nemek.add(radioButtonGirl);
        radioButtonGirl.setText("lány");
        radioButtonGirl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonGirlActionPerformed(evt);
            }
        });

        nemek.add(radioButtonBoy);
        radioButtonBoy.setText("fiú");
        radioButtonBoy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonBoyActionPerformed(evt);
            }
        });

        labelOldest.setText("legidősebb:");

        labelSumAge.setText("összes kor:");

        labelOldWorker.setText("6 éve dolgozó:");

        labelStatusAge.setText("kor:");

        labelStatusWorkHours.setText("mióta dolgozik:");

        jLabel9.setText("Fiúk");

        comboBoxGirls.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxGirlsItemStateChanged(evt);
            }
        });

        comboBoxBoys.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxBoysItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelSumAge)
                    .addComponent(labelOldest)
                    .addComponent(labelOldWorker))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBoxAllGnders))
                .addGap(30, 30, 30))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(radioButtonGirl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioButtonBoy))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxGirls, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelStatusWorkHours)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxBoys, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelStatusAge))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel1)
                    .addComponent(comboBoxGirls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxBoys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioButtonGirl)
                    .addComponent(radioButtonBoy)
                    .addComponent(labelStatusAge))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelStatusWorkHours)
                .addGap(4, 4, 4)
                .addComponent(labelOldest)
                .addGap(18, 18, 18)
                .addComponent(labelSumAge)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxAllGnders)
                    .addComponent(labelOldWorker))
                .addGap(18, 18, 18)
                .addComponent(buttonSave)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int getOldest(char gender)
    {
        int oldest = 0;
        for (Dolgozo dolgozo : dolgozok)
        {
            if ((gender == '*' || dolgozo.getGender() == gender) && dolgozo.getAge() > oldest)
            {
                oldest = dolgozo.getAge();
            }
        }
        return oldest;
    }
    
    private int getSumAge(char gender)
    {
        int sumAge = 0;
        for (Dolgozo dolgozo : dolgozok)
        {
            if (gender == '*' || dolgozo.getGender() == gender)
            {
                sumAge += dolgozo.getAge();
            }
        }
        return sumAge;
    }
    
    private String getOldWorker(char gender)
    {
        int x = 0;
        while (x < dolgozok.size() && ((gender != '*' && dolgozok.get(x).getGender() != gender) || dolgozok.get(x).getHoursWorked()< 6))
        {
            x++;
        }
        if (x < dolgozok.size())
        {
            return dolgozok.get(x).getName();
        }
        else
        {
            return "";
        }
    }
    
    private void resetSumariseLabels()
    {
        labelOldest.setText(DEF_LABEL_OLDEST);
        labelSumAge.setText(DEF_LABEL_SUM_AGE);
        labelOldWorker.setText(DEF_LABEL_OLD_WORKER);
    }
    
    private void updateSummariseLabels(char gender)
    {
        if (checkBoxAllGnders.isSelected())
        {
            gender = GENDER_ALL;
        }
        resetSumariseLabels();
        labelOldest.setText(DEF_LABEL_OLDEST + " " + getOldest(gender));
        labelSumAge.setText(DEF_LABEL_SUM_AGE + " " + getSumAge(gender));
        var oldW = getOldWorker(gender);
        labelOldWorker.setText(DEF_LABEL_OLD_WORKER + " " + ("".equals(oldW)? "nincs": oldW));
    }
    
    private void updateStatus(char gender, int index) {
        if (index > -1 && !LOADING_GENDER_LISTS)
        {
            var dolgozo = getDolgozok(gender).get(index);
            labelStatusAge.setText(DEF_LABEL_STATUS_AGE + " " + dolgozo.getAge());
            String hoursWorked = dolgozo.getHoursWorked() + " éve";
            labelStatusWorkHours.setText(DEF_LABEL_STATUS_HOURS_WORKED + " " + hoursWorked);
        }
    }
    
    private FileWriter createSumarisedFile() throws IOException {
        try {
            var file = new File(DOLGOZOK_FILE_PATH);
            if (file.exists())
            {
                file.delete();
            }
            file.createNewFile();
            var writer = new FileWriter(file);
            return writer;
        } catch (FileNotFoundException ex) { }
        return null;
    }
    
    private void writeSumarisedToFile(FileWriter file, char gender) throws IOException {
        var genderName = getGenderName(gender);
        var text = new StringBuilder();
        text.append(genderName).append(":\n");
        text.append(DEF_LABEL_OLDEST + " " + getOldest(gender) + "\n");
        text.append(DEF_LABEL_SUM_AGE + " " + getSumAge(gender) + "\n");
        text.append(DEF_LABEL_OLD_WORKER + " " + getOldWorker(gender) + "\n");
        file.write(text.toString());
    }
    
    private String getGenderName(char gender)
    {
        return switch (gender) {
            case GENDER_BOY -> "Fiú";
            case GENDER_GIRL -> "Lány";
            case GENDER_ALL -> "Mind";
            default -> "";
        };
    }
    
    private void writeGenderSumarisedToFile(char gender) throws IOException {
        var file = createSumarisedFile();
        if (file != null)
        {
            if (gender == GENDER_ALL)
            {
                writeSumarisedToFile(file, GENDER_BOY);
                writeSumarisedToFile(file, GENDER_GIRL);
            }
            else
            {
                writeSumarisedToFile(file, gender);
            }
        }
        file.close();
    }
    
    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        char gender = 0;
        if (checkBoxAllGnders.isSelected())
        {
            gender = GENDER_ALL;
        }
        else if (radioButtonBoy.isSelected())
        {
            gender = GENDER_BOY;
        }
        else if (radioButtonGirl.isSelected())
        {
            gender = GENDER_GIRL;
        }
        if (gender != 0)
        {
            try {
                writeGenderSumarisedToFile(gender);
            } catch (IOException ex) {
                Logger.getLogger(Dolgozok.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void radioButtonBoyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonBoyActionPerformed
        updateSummariseLabels(GENDER_BOY);
    }//GEN-LAST:event_radioButtonBoyActionPerformed

    private void radioButtonGirlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonGirlActionPerformed
        updateSummariseLabels(GENDER_GIRL);
    }//GEN-LAST:event_radioButtonGirlActionPerformed

    private void checkBoxAllGndersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAllGndersActionPerformed
        updateSummariseLabels(GENDER_ALL);
    }//GEN-LAST:event_checkBoxAllGndersActionPerformed

    private void comboBoxGirlsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxGirlsItemStateChanged
        updateStatus(GENDER_GIRL, comboBoxGirls.getSelectedIndex());
    }//GEN-LAST:event_comboBoxGirlsItemStateChanged

    private void comboBoxBoysItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxBoysItemStateChanged
        updateStatus(GENDER_BOY, comboBoxBoys.getSelectedIndex());
    }//GEN-LAST:event_comboBoxBoysItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dolgozok.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dolgozok.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dolgozok.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dolgozok.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dolgozok().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSave;
    private javax.swing.JCheckBox checkBoxAllGnders;
    private javax.swing.JComboBox<String> comboBoxBoys;
    private javax.swing.JComboBox<String> comboBoxGirls;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel labelOldWorker;
    private javax.swing.JLabel labelOldest;
    private javax.swing.JLabel labelStatusAge;
    private javax.swing.JLabel labelStatusWorkHours;
    private javax.swing.JLabel labelSumAge;
    private javax.swing.ButtonGroup nemek;
    private javax.swing.JRadioButton radioButtonBoy;
    private javax.swing.JRadioButton radioButtonGirl;
    // End of variables declaration//GEN-END:variables
}
